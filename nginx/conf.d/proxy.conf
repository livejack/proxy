lua_package_path './rocks/share/lua/5.1/?.lua;';

lua_shared_dict auto_ssl 128k;
lua_shared_dict auto_ssl_settings 64k;

resolver 127.0.0.53 ipv6=off;

# reasonable limits
limit_req_zone $binary_remote_addr zone=ratePerIP:10m rate=5r/s;
limit_req_zone $host zone=ratePerHost:10m rate=100r/s;
limit_req_status 429;

lua_shared_dict sites 64k;

# Initial setup tasks.
init_by_lua_block {
  upcache = require "upcache"
  auto_ssl = (require "resty.auto-ssl").new()
  certificates = (require "certificates").init("./nginx/ssl/cert/")

  if certificates["localhost"] ~= nil then
    auto_ssl:set("ca", "https://acme-staging-v02.api.letsencrypt.org/directory")
    ngx.log(ngx.WARN, "autossl acme ca: staging")
  else
    auto_ssl:set("ca", "https://acme-v02.api.letsencrypt.org/directory")
    ngx.log(ngx.WARN, "autossl acme ca: production")
  end

  auto_ssl:set("ocsp_stapling_error_level", ngx.WARN)
  auto_ssl:set("hook_server_port", 18099)
  auto_ssl:set("dir", lfs.currentdir() .. "/autossl")

  local sites = require "sites"
  sites.init(os.getenv("HOME") .. "/.config/livejack/server/", ngx.shared.sites)

  auto_ssl:set("request_domain", function(ssl, ssl_options)
    local domain, err = ssl.server_name()
    if not err and domain ~= nil then
      for certname, pem in pairs(certificates) do
        if domain == certname then
          ssl_options.privkey_der = pem.key
          ssl_options.fullchain_der = pem.full
        end
      end
    end
    return domain, err
  end)

  auto_ssl:set("allow_domain", function(domain, autossl, ssl_options)
    ngx.log(ngx.ERR, "allow: "..domain.." ? "..ngx.shared.sites:get(domain))
    if domain ~= nil and domain ~= "" and ngx.shared.sites:get(domain) ~= nil then
      return true
    else
      return false
    end
  end)

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

# Internal server for handling certificate tasks.
server {
  listen 127.0.0.1:18099;

  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}

